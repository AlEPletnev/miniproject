version: '3.8'

services:
  minio:
    image: minio/minio  
    container_name: minio_server
    ports:
      - "9000:9000"  
      - "9001:9001"  
    environment:
      - MINIO_ROOT_USER=minioadmin  
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data  
    command: server /data --console-address ":9001"  
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3

  init-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy 
    entrypoint: >
      sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin); do 
          echo ' MinIO...';
          sleep 1;
      done;

      /usr/bin/mc mb minio/invoce-storage;

      echo 'Buckets invoce-storage created!';
      "

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    entrypoint: >
      sh -c "
      echo 'Waiting for Kafka to be ready...';
      until kafka-topics --bootstrap-server kafka:29092 --list; do
          sleep 1;
      done;

      kafka-topics --bootstrap-server kafka:29092 --create --topic order-created --partitions 1 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --topic order-request --partitions 1 --replication-factor 1;

      echo 'Topics topic1 and topic2 created!';
      "
  
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: test_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql 

  init-postgres:
    image: postgres:13
    depends_on:
      - postgres
    entrypoint: >
      sh -c "
      echo 'Waiting for PostgreSQL to be ready...';
      until pg_isready -h postgres -U admin -d test_db; do
          sleep 1;
      done;
      echo 'PostgreSQL is ready!';
      psql -h postgres -U admin -d test_db -c 'SELECT * FROM example_table;';
      "

  mysql:
    image: mysql:8.0
    container_name: mysql_db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: app_db
      MYSQL_USER: app_user
      MYSQL_PASSWORD: userpass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-mysql.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 20s
      retries: 10

  init-mysql:
    image: mysql:8.0
    depends_on:
      mysql:
        condition: service_healthy
    entrypoint: >
      sh -c "
      echo 'Waiting for MySQL to be ready...';
      until mysql -h mysql -u app_user -puserpass -e 'SELECT 1'; do
          sleep 1;
      done;
      echo 'MySQL is ready!';
      mysql -h mysql -u app_user -puserpass app_db -e 'SHOW TABLES; SELECT * FROM orders;';
      "

  aggregator-service:
    build:
      context: .\Aggregator-Service 
      dockerfile: Dockerfile  
    container_name: aggregator-service
    ports:
      - "9090:9090"
    depends_on:
      - kafka  
      - mysql  
      - postgres
    environment:
      #SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  order-service:
    build:
      context: .\orderservice  
      dockerfile: Dockerfile  
    container_name: order-service
    ports:
      - "9091:9091" 
    depends_on:
      - kafka
      - postgres  
      - minio     
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/test_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_MINIO_URL: http://minio:9000
      SPRING_MINIO_ACCESS_KEY: minioadmin
      SPRING_MINIO_SECRET_KEY: minioadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  notification-service:
    build:
      context: .\notificationservice\
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "9093:9093"  
    depends_on:
      - kafka
      - mysql
      - postgres 
      - minio
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_GROUP_ID: json-group
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/app_db?useSSL=false
      SPRING_DATASOURCE_USERNAME: app_user
      SPRING_DATASOURCE_PASSWORD: userpass
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9093/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  minio_data:
  postgres_data:
  mysql_data: